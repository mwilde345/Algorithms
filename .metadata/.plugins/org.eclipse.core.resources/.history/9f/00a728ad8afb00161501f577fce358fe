package Permutation;

import java.math.BigInteger;
import java.util.ArrayList;

public class Unrank {
	public static void main(String[] args){
		Unrank u = new Unrank();
		u.unrankMe(new BigInteger("5"),new BigInteger("57"));
	}
	public void unrankMe(BigInteger order, BigInteger rank){
		ArrayList<BigInteger> notUsed = populateNotUsed(order);
		ArrayList<BigInteger> permutation = new ArrayList<BigInteger>();
		BigInteger remainder = rank; //57
		BigInteger currentBase = order.subtract(BigInteger.ONE); //4
		int counter = 1;
		while(remainder.compareTo(BigInteger.ZERO)>0){
			BigInteger baseFactorial = getFactorial(currentBase); //4!
			BigInteger count = BigInteger.ONE;
			BigInteger sum = baseFactorial;
			while(sum.add(baseFactorial).compareTo(remainder)<0){
				count=count.add(BigInteger.ONE);
				sum=sum.add(baseFactorial);
			}
			remainder = remainder.subtract(sum);
			currentBase = currentBase.subtract(BigInteger.ONE);
			/*
			for(int i = 0; i<notUsed.size(); i++){
				BigInteger numsLessThan = BigInteger.ZERO;
				if(notUsed.get(i).compareTo(BigInteger.ZERO)>=0){
					numsLessThan = numsLessThan.add(BigInteger.ONE);
					System.out.println(notUsed.toString());
					notUsed.remove(i);
				}
				if(numsLessThan.compareTo(count.add(BigInteger.ONE))==0){
					permutation.add(notUsed.get(i));
				}
			}*/
			permutation.add(notUsed.get(Integer.valueOf(count.toString())));
			notUsed.remove(Integer.valueOf(count.toString()));
			System.out.println(Integer.valueOf(count.toString()));
		}
		System.out.println(permutation.toString());
	}
	public BigInteger getFactorial(BigInteger base){
		BigInteger fact = BigInteger.ONE;
		for(BigInteger j = BigInteger.ONE; j.compareTo(base)<=0; j=j.add(BigInteger.ONE)){
			fact = fact.multiply(j);
		}
		return fact;
	}
	public ArrayList<BigInteger> populateNotUsed(BigInteger order){
		ArrayList<BigInteger> result = new ArrayList<BigInteger>();
		for(BigInteger j = BigInteger.ONE; j.compareTo(order)<=0; j=j.add(BigInteger.ONE)){
			result.add(j);
		}
		return result;
	}
}
